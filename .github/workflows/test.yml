# Copyright the midgard contributors.
# SPDX-License-Identifier: MPL-2.0

name: Tests

on:
    push:
        branches:
          - master
    pull_request:
        branches:
          - master

# Declare default permissions as read only.
permissions: read-all

jobs:
    FormatCheck:
        strategy:
            matrix:
                go-version:
                  - "1.22"
        runs-on: ubuntu-latest
        steps:
          - name: Harden Runner
            uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
            with:
              egress-policy: audit

          - name: Install Go
            uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
            with:
                go-version: ${{matrix.go-version}}

          - name: Checkout
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            with:
                fetch-depth: 1

          - name: FormatCheck
            run: if [ `go fmt ./... | wc -l` -gt 0 ] ; then echo "Found unformatted code" ; exit 1 ; else exit 0 ; fi

    StaticCheck:
        strategy:
            matrix:
                go-version:
                  - "1.22"
        runs-on: ubuntu-latest
        steps:
          - name: Harden Runner
            uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
            with:
              egress-policy: audit

          - name: Install Go
            uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
            with:
                go-version: ${{matrix.go-version}}

          - name: Checkout
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            with:
                fetch-depth: 1

          - name: StaticCheck
            uses: dominikh/staticcheck-action@fe1dd0c3658873b46f8c9bb3291096a617310ca6 # v1.3.1
            with:
                version: latest
                install-go: false
                cache-key: ${{matrix.go-version}}

    Test:
        strategy:
            matrix:
                go-version:
                  - "1.22"
                platform:
                  #- macos-latest
                  - ubuntu-latest
                  #- windows-latest
        runs-on: ${{matrix.platform}}
        steps:
          - name: Harden Runner
            uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
            with:
              egress-policy: audit

          - name: Install Go
            uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
            with:
                go-version: ${{matrix.go-version}}

          - name: Checkout
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            with:
                fetch-depth: 1

          - name: Test
            run: go test -v `go list ./... | grep -v example` --covermode=count --coverpkg=./... --coverprofile=coverage.txt

          - name: Coverage
            run: go tool cover -func=coverage.txt

          - name: Upload coverage to Codecov
            uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
            with:
                token: ${{ secrets.CODECOV_TOKEN }}

    # This action is mainly composed of snippets of github.com/jidicula/go-fuzz-action
    FuzzTest:
        strategy:
            matrix:
                go-version:
                  - "1.22"
                platform:
                  #- macos-latest
                  - ubuntu-latest
                  #- windows-latest
                packages:
                  - ./handler/method_filter
        runs-on: ${{ matrix.platform }}
        steps:
          - name: Harden Runner
            uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
            with:
              egress-policy: audit

          - name: Install Go
            uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
            with:
                go-version: ${{matrix.go-version}}

          - name: Checkout
            uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
            with:
                fetch-depth: 1

          - name: Run Fuzz Test
            shell: bash
            run: go test ${{ matrix.packages }} -fuzz="Fuzz" -fuzztime="30s" -fuzzminimizetime="10s"

          - name: Upload fuzz failure seed corpus as run artifact
            if: failure()
            uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
            with:
                name: testdata
                path: testdata

          - run: echo "EVENT NAME IS ${{ github.event_name }}"
            if: failure()
            shell: bash

          - name: Save PR head commit SHA
            if: failure() && github.event_name == 'pull_request'
            shell: bash
            run: |
                SHA="${{ github.event.pull_request.head.sha }}"
                echo "SHA=$SHA" >> $GITHUB_ENV

          - name: Save latest commit SHA if not PR
            if: failure() && github.event_name != 'pull_request'
            shell: bash
            run: echo "SHA=${{ github.sha }}" >> $GITHUB_ENV

          - name: Output message
            if: failure()
            shell: bash
            run: |
                MESSAGE='Fuzz test failed on commit ${{ env.SHA }}. To troubleshoot locally, use the [GitHub CLI](https://cli.github.com) to download the seed corpus with\n```\ngh run download ${{ github.run_id }} -n testdata\n```'
                DEEPLINK="https://github.com/${{ github.repository }}/commit/${{ env.SHA }}"
                echo -e "${MESSAGE/${{ env.SHA }}/$DEEPLINK}"
                echo -e "${MESSAGE/${{ env.SHA }}/[${GITHUB_SHA:0:8}]($DEEPLINK)}" >> $GITHUB_STEP_SUMMARY
